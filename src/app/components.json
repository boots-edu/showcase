{
    "add-remove": {
        "add-remove.component.html": "<p>AddRemove Component</p>\n",
        "add-remove.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { AddRemoveComponent } from \"./add-remove.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"AddRemoveComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<AddRemoveComponent>(AddRemoveComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(AddRemoveComponent);\n        });\n    });\n});\n",
        "add-remove.component.ts": "import { WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./add-remove.component.html\";\nimport css from \"./add-remove.component.css\";\n\nexport class AddRemoveComponent extends WebzComponent {\n    constructor() {\n        super(html, css);\n    }\n}\n"
    },
    "dynamic": {
        "dynamic.component.html": "<div>\n    <button id=\"add-to-string\">Add to string</button>\n    <button id=\"add-component\">Add dynamic component</button><br><br>\n    <strong>Bound String</strong>\n    <div>\n        A <code>@BindValue</code> string variable:\n        <span id=\"bound-string\"></span>\n    </div><br>\n    <strong>Dynamic Component</strong>\n    <div>\n        Actual Dynamically added components:\n        <span id=\"new-component-region\"></span>\n    </div><br>\n    <strong class=\"alert alert-info\">Read the explanation below for more detail!</strong>\n</div>",
        "dynamic.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { DynamicComponent } from \"./dynamic.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"DynamicComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<DynamicComponent>(DynamicComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(DynamicComponent);\n        });\n    });\n});\n",
        "dynamic.component.ts": "import { BindValue, Click, WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./dynamic.component.html\";\nimport css from \"./dynamic.component.css\";\nimport { SomeTextComponent } from \"./some-text/some-text.component\";\n\nexport class DynamicComponent extends WebzComponent {\n    // Bind stringContent to the element with the id \"bound-string\"\n    @BindValue(\"bound-string\")\n    private stringContent: string = \"THE TEXT\";\n\n    constructor() {\n        super(html, css);\n    }\n\n    // Clicking the element \"add-to-string\" will add more text to the stringContent\n    @Click(\"add-to-string\")\n    addToString() {\n        this.stringContent += \" AND NOW MORE TEXT\";\n    }\n\n    // Clicking the \"bound-string\" will reset the text to a different value\n    @Click(\"bound-string\")\n    clickedBoundString() {\n        this.stringContent = \"YOU CLICKED SOMEWHERE ON THE BOUND STRING.\";\n    }\n\n    // Clicking the \"add-component\" will add a new component to the \"new-component-region\"\n    @Click(\"add-component\")\n    addSomeTextComponent() {\n        const newSomeText = new SomeTextComponent();\n        this.addComponent(newSomeText, \"new-component-region\");\n    }\n}\n",
        "readme.md": "This example shows how you can use components to make content that is added dynamically, compared to just manipulating a string.\n\nThe first button will modify a bound string member variable, adding another bit of text to it.\nThis may appear to be dynamic content, but it's very limited in what it can do.\nWe bound a `click` event to the text itself, but that doesn't tell us WHICH part of the text was clicked - just that the entire string was clicked.\nThis prevents us from doing anything fancy with parts of the text.\n\nThe second button, however, will actually create a new instance of the `SomeTextComponent` and add it to the HTML\nof the page using `addComponent`. We can then bind `Click` events to the individual `SomeTextComponent` instances,\nso that they can be clicked individually.\n\nIf you need dynamically added (or removed) content on a page, you almost definitely want a separate component, so you\ncan bind events and values to the content. You can't just manipulate strings (although that can be useful for specific purposes).\n",
        "some-text.component.html": "<span id=\"text\"></span>\n",
        "some-text.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { SomeTextComponent } from \"./some-text.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"SomeTextComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<SomeTextComponent>(SomeTextComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(SomeTextComponent);\n        });\n    });\n});\n",
        "some-text.component.ts": "import { BindValue, Click, WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./some-text.component.html\";\nimport css from \"./some-text.component.css\";\n\nexport class SomeTextComponent extends WebzComponent {\n    // Changing textValue will change the text in the element with the id \"text\"\n    @BindValue(\"text\")\n    private textValue: string = \"Click me!\";\n\n    constructor() {\n        super(html, css);\n    }\n\n    // Clicking the element with the id \"text\" will change the text to a different value\n    @Click(\"text\")\n    onTextClicked() {\n        this.textValue = \"You clicked the text!\";\n    }\n}\n"
    },
    "garden-example": {
        "garden-main.component.css": ".title {\n    font-size: 20px;\n    color: #000;\n    margin-bottom: 20px;\n}\n",
        "garden-main.component.html": "<div id=\"garden\"></div>\n<div id=\"display-case\"></div>\n",
        "garden-main.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { GardenMainComponent } from \"./garden-main.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"GardenMainComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<GardenMainComponent>(GardenMainComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(GardenMainComponent);\n        });\n    });\n});\n",
        "garden-main.component.ts": "import html from \"./garden-main.component.html\";\nimport css from \"./garden-main.component.css\";\nimport { WebzComponent } from \"@boots-edu/webz\";\nimport { GardenComponent } from \"./garden/garden.component\";\nimport { DisplayCaseComponent } from \"./display-case/display-case.component\";\nimport { PlantComponent } from \"./plant/plant.component\";\n\n/**\n * @description GardenMainComponent is the main component of the app\n * @extends WebzComponent\n *\n */\nexport class GardenMainComponent extends WebzComponent {\n    constructor() {\n        super(html, css);\n\n        const garden = new GardenComponent();\n        this.addComponent(garden, \"garden\");\n        const displayCase = new DisplayCaseComponent();\n        this.addComponent(displayCase, \"display-case\");\n\n        garden.gatherEvent.subscribe((plants: PlantComponent[]) => {\n            displayCase.addPlants(plants);\n        });\n    }\n}\n",
        "readme.md": "A component that has inter-component communication:\n\n-   The `Garden` component is composed of `Plant` components, so clicking on the plant fires an event that the `Garden` listens to (to remove the plant).\n-   The `GardenMain` component is composed of a `Garden` and a `DisplayCase` component, so clicking the Gather button fires an event that the `GardenMain` uses to add the plants to the display case.\n",
        "display-case.component.html": "Display Case:\n\n<div id=\"rows\"></div>\n",
        "display-case.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { DisplayCaseComponent } from \"./display-case.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"DisplayCaseComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<DisplayCaseComponent>(DisplayCaseComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(DisplayCaseComponent);\n        });\n    });\n});\n",
        "display-case.component.ts": "import { WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./display-case.component.html\";\nimport css from \"./display-case.component.css\";\nimport { DisplayRowComponent } from \"../display-row/display-row.component\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class DisplayCaseComponent extends WebzComponent {\n    private rows: DisplayRowComponent[] = [];\n    constructor() {\n        super(html, css);\n    }\n\n    addPlants(plants: PlantComponent[]) {\n        const row = new DisplayRowComponent(plants);\n        this.addComponent(row);\n        this.rows.push(row);\n    }\n}\n",
        "display-row.component.css": "#plants {\n    display: flex;\n}\n",
        "display-row.component.html": "<div id=\"plants\"></div>\n",
        "display-row.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { DisplayRowComponent } from \"./display-row.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"DisplayRowComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<DisplayRowComponent>(DisplayRowComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(DisplayRowComponent);\n        });\n    });\n});\n",
        "display-row.component.ts": "import { WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./display-row.component.html\";\nimport css from \"./display-row.component.css\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class DisplayRowComponent extends WebzComponent {\n    constructor(plants: PlantComponent[]) {\n        super(html, css);\n        for (let plant of plants) {\n            this.addComponent(plant, \"plants\");\n        }\n    }\n}\n",
        "garden.component.html": "<button\n    id=\"add-plant\"\n    title=\"Creates a new random flower that appears lower on the screen. You can click the flower to remove it.\"\n>\n    Plant New Flower\n</button>\n<div id=\"plants\"></div>\n<button id=\"gather\">Gather the flowers</button>\n",
        "garden.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { GardenComponent } from \"./garden.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"GardenComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<GardenComponent>(GardenComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(GardenComponent);\n        });\n    });\n});\n",
        "garden.component.ts": "import { Click, Notifier, WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./garden.component.html\";\nimport css from \"./garden.component.css\";\nimport { PlantComponent } from \"../plant/plant.component\";\n\nexport class GardenComponent extends WebzComponent {\n    private plants: PlantComponent[] = [];\n    private latestId = 0;\n\n    gatherEvent: Notifier<PlantComponent[]> = new Notifier();\n\n    constructor() {\n        super(html, css);\n    }\n    @Click(\"add-plant\")\n    addPlant() {\n        const newPlant = new PlantComponent(this.latestId);\n        this.addComponent(newPlant, \"plants\");\n        this.plants.push(newPlant);\n        this.latestId += 1;\n        newPlant.removeEvent.subscribe((id: number) => {\n            this.removePlant(id);\n        });\n    }\n\n    removePlant(target: number) {\n        for (let i = 0; i < this.plants.length; i += 1) {\n            if (this.plants[i].getId() === target) {\n                const removedElements = this.plants.splice(i, 1);\n                for (let e of removedElements) {\n                    this.removeComponent(e);\n                }\n            }\n        }\n    }\n\n    @Click(\"gather\")\n    onGather() {\n        const removed = this.plants.splice(0, this.plants.length);\n        this.gatherEvent.next(removed);\n    }\n}\n",
        "plant.component.html": "<span id=\"pic\"></span>\n",
        "plant.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { PlantComponent } from \"./plant.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"PlantComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<PlantComponent>(PlantComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(PlantComponent);\n        });\n    });\n});\n",
        "plant.component.ts": "import {\n    BindAttribute,\n    BindValue,\n    Click,\n    Notifier,\n    WebzComponent,\n} from \"@boots-edu/webz\";\nimport html from \"./plant.component.html\";\nimport css from \"./plant.component.css\";\n\nconst FLOWERS = [\"\u00f0\u0178\u0152\u00b1\", \"\u00f0\u0178\u0152\u00b9\", \"\u00f0\u0178\u0152\u00b7\", \"\u00f0\u0178\u0152\u00bc\", \"\u00f0\u0178\u0152\u00ba\", \"\u00f0\u0178\u0152\u00bb\"];\n\nfunction makeFlower(): string {\n    return FLOWERS[Math.floor(Math.random() * FLOWERS.length)];\n}\n\nexport class PlantComponent extends WebzComponent {\n    @BindValue(\"pic\")\n    private picture: string = makeFlower();\n\n    @BindAttribute(\"pic\", \"title\", (id: number) => id.toString())\n    private id: number;\n\n    removeEvent: Notifier<number> = new Notifier<number>();\n\n    constructor(id: number) {\n        super(html, css);\n        this.id = id;\n    }\n\n    getId(): number {\n        return this.id;\n    }\n\n    @Click(\"pic\")\n    onPicClicked() {\n        this.removeEvent.next(this.id);\n    }\n}\n"
    },
    "joke": {
        "joke.component.html": "<p>\n    What's orange and sounds like a carrot?\n    <button id=\"reveal\">Reveal</button>\n    <span id=\"punchline\">A parrot.</span>\n</p>\n",
        "joke.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { JokeComponent } from \"./joke.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"JokeComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<JokeComponent>(JokeComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(JokeComponent);\n        });\n    });\n});\n",
        "joke.component.ts": "import { BindVisibleToBoolean, Click, WebzComponent } from \"@boots-edu/webz\";\nimport html from \"./joke.component.html\";\nimport css from \"./joke.component.css\";\n\nexport class JokeComponent extends WebzComponent {\n    @BindVisibleToBoolean(\"punchline\")\n    visible: boolean = false;\n\n    constructor() {\n        super(html, css);\n    }\n\n    @Click(\"reveal\")\n    reveal() {\n        this.visible = !this.visible;\n    }\n}\n",
        "readme.md": "A short component that displays the start of a joke and a button to reveal the punchline. Uses the `@BindVisibleToBoolean` to toggle the visibility of the punchline, and the `Click` event to let the button control the state.\n"
    },
    "race": {
        "race.component.css": ".road {\n    height: 160px;\n    width: 100%;\n    /*background-image: url(assets/road.jpg);\n    background-size: contain;*/\n    background-color: grey;\n    position: relative;\n    margin-top: 20px;\n}\n.road::after {\n    content: \" \";\n    display: inline-block;\n    border-bottom: 10px dashed yellow;\n    position: relative;\n    width: 100%;\n    height: 50%;\n}\n.car {\n    position: absolute;\n    /*top: 165px;*/\n    top: 10px;\n    left: 50%;\n    height: 60px;\n}\n/* This prevents the scrollbar when the car is off screen by putting the road and car inside a container that is the entire \n * screen width and height, but has overflow hidden\n */\n.wrapper {\n    position: relative;\n    width: 100%;\n    height: 200px;\n    overflow: hidden;\n    background: green;\n}\n\n#score {\n    left: 0;\n    top: 0;\n}\n#clock {\n    right: 0;\n    top: 0;\n}\n\n.display {\n    position: absolute;\n    padding: 4px 10px;\n    height: 20px;\n    font-size: 16px;\n    background: #030303;\n    text-align: center;\n    color: #f0f0f0;\n}\n",
        "race.component.html": "<button id=\"start\" class=\"btn btn-success\">Start</button>\n<div class=\"wrapper\">\n    <div alt=\"road\" class=\"road\" id=\"road\">\n        <div class=\"display\" id=\"score\">Score: 0000000</div>\n        <div class=\"display\" id=\"clock\">Time: 00:00</div>\n        <img src=\"assets/car.gif\" alt=\"car\" class=\"car\" id=\"car\" />\n    </div>\n</div>\n",
        "race.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { RaceComponent } from \"./race.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"RaceComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<RaceComponent>(RaceComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(RaceComponent);\n        });\n    });\n});\n",
        "race.component.ts": "import html from \"./race.component.html\";\nimport css from \"./race.component.css\";\nimport {\n    BindStyleToNumber,\n    BindValue,\n    Click,\n    WebzComponent,\n    WebzDialog,\n    Timer,\n    WindowEvent,\n} from \"@boots-edu/webz\";\nimport { ObstacleComponent } from \"./obstacle/obstacle.component\";\n\n/**\n * @description MainComponent is the main component of the app\n * @extends WebzComponent\n *\n */\nexport class RaceComponent extends WebzComponent {\n    private running: boolean = true;\n    private speed: number = 10;\n    private topLane: number = 10;\n    private bottomLane: number = 90;\n    @BindValue(\"score\", (value: number) => `Score: ${value.toString()} `)\n    private score: number = 0;\n    @BindValue(\"clock\")\n    private clock: string = \"00:00\";\n    private startTime: Date = new Date();\n\n    @BindStyleToNumber(\"car\", \"top\", \"px\")\n    private top: number = this.topLane;\n\n    @BindStyleToNumber(\"car\", \"left\", \"%\")\n    private left: number = 100;\n\n    obstracles: ObstacleComponent[] = [];\n    constructor() {\n        super(html, css);\n        this.resetGame();\n    }\n\n    /**\n     * @description resetGame:Restart the game and reset position and score\n     * @returns {void}\n     */\n    resetGame() {\n        this.removeObstacles();\n        this.addObstacles();\n        this.left = 100;\n        this.speed = 5;\n        this.score = 0;\n        this.clock = \"00:00\";\n        this.top = this.topLane;\n        this.startTime = new Date();\n        this.running = false;\n    }\n    /**\n     * @description removeObstacles is a method that removes all obstacles from the road\n     * @returns {void}\n     */\n    removeObstacles() {\n        this.obstracles.forEach((obs) => {\n            this.removeComponent(obs);\n        });\n        this.obstracles = [];\n    }\n\n    /**\n     * @description addObstacles is a method that adds obstacles to the road\n     * @returns {void}\n     */\n    addObstacles(): void {\n        const GAP = 50;\n        let col = Math.floor(Math.random() * GAP + 10);\n        let col2 = Math.floor(Math.random() * GAP + 10);\n        let obs = new ObstacleComponent(10, col);\n        this.obstracles.push(obs);\n        this.addComponent(obs, \"road\");\n        obs = new ObstacleComponent(90, col2);\n        this.obstracles.push(obs);\n        this.addComponent(obs, \"road\");\n    }\n\n    /**\n     * @description hitTest is a method that checks if the car has hit an obstacle\n     * @returns {boolean} - true if the car has hit an obstacle, false otherwise\n     */\n    hitTest(): boolean {\n        // the car is in a box that has a left margin of 50, a top margin of 30 within the car and has a height of 90 and a width of 180\n        // the obstacles are at this.obstracles[i].x and this.obstacles[i].y  The obstacles are 70x100\n        let estimatedCarWidthPercent = 10;\n        let estimatedBumperWidthPercent = 1;\n        for (let i = 0; i < this.obstracles.length; i++) {\n            let obs = this.obstracles[i];\n            if (\n                this.left > obs.x - estimatedCarWidthPercent &&\n                this.left < obs.x + estimatedBumperWidthPercent &&\n                this.top == obs.y\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @description updateTime is a method that updates the clock based on actual time elapsed\n     * @returns {void}\n     */\n    updateTime() {\n        let now = new Date();\n        let diff = now.getTime() - this.startTime.getTime();\n        let minutes = Math.floor(diff / 60000);\n        let seconds = Math.floor((diff - minutes * 60000) / 1000);\n        this.clock = `${minutes < 10 ? \"0\" : \"\"}${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n    }\n    /**\n     * @description Timer method executes periodically (100ms)\n     * @param cancel {() => void} - a function that can be called to cancel the timer\n     * @returns {void}\n     */\n    @Timer(50)\n    onTimerTick(): void {\n        if (!this.running) return;\n        this.left -= this.speed;\n        this.updateTime();\n        this.score = this.score + this.speed * this.speed;\n        if (this.left < -20) {\n            this.removeObstacles();\n            this.addObstacles();\n            this.left = 100;\n        }\n        if (this.hitTest()) {\n            this.running = false;\n            WebzDialog.popup(this, \"You Crashed!\", \"Game Over\").subscribe(() => {\n                this.resetGame();\n            });\n        }\n    }\n    /**\n     * @description onKeydown is a method that listens for keydown events\n     * For anytime you need a keypress this is how you do it.\n     * @param event {KeyboardEvent} - the event that was triggered\n     * @returns {void}\n     */\n    @WindowEvent(\"keydown\")\n    onKeydown(event: KeyboardEvent) {\n        if (event.key === \"ArrowUp\") {\n            this.top = this.topLane;\n        } else if (event.key === \"ArrowDown\") {\n            this.top = this.bottomLane;\n        } else if (event.key === \"ArrowLeft\") {\n            if (this.speed < 10) this.speed += 1;\n        } else if (event.key === \"ArrowRight\") {\n            if (this.speed > -10) this.speed -= 1;\n        }\n    }\n\n    @Click(\"start\")\n    start() {\n        this.running = true;\n    }\n}\n",
        "readme.md": "A little racing game where a car scrolls across the screen (using a `Timer`). You can move the car up or down a lane using the keyboard keys (thanks to `WindowEvent`).\n",
        "obstacle.component.css": ".cone {\n    /*background-image: url(assets/cone.gif);\n    background-size: contain;\n    background-repeat: no-repeat;*/\n    position: absolute;\n    box-sizing: border-box;\n    /*width: 40px;\n    height: 20px;*/\n    font-size: 40px;\n}\n",
        "obstacle.component.html": "<div id=\"cone\" class=\"cone\">\u00f0\u0178\u0161\u00a7</div>\n",
        "obstacle.component.test.ts": "import { describe, expect, test, beforeAll } from \"@jest/globals\";\nimport { ObstacleComponent } from \"./obstacle.component\";\nimport { bootstrap } from \"@boots-edu/webz\";\n\ndescribe(\"ObstacleComponent\", () => {\n    let component: any = undefined;\n    beforeAll(() => {\n        const html: string = `<div>Testing Environment</div><div id='main-target'></div>`;\n        component = bootstrap<ObstacleComponent>(ObstacleComponent, html);\n    });\n    describe(\"Constructor\", () => {\n        test(\"Create Instance\", () => {\n            expect(component).toBeInstanceOf(ObstacleComponent);\n        });\n    });\n});\n",
        "obstacle.component.ts": "import {\n    BindStyleToNumber,\n    BindStyleToNumberAppendPx,\n    WebzComponent,\n} from \"@boots-edu/webz\";\nimport html from \"./obstacle.component.html\";\nimport css from \"./obstacle.component.css\";\n\nexport class ObstacleComponent extends WebzComponent {\n    @BindStyleToNumberAppendPx(\"cone\", \"top\")\n    y: number;\n    @BindStyleToNumber(\"cone\", \"left\", \"%\")\n    x: number;\n    constructor(y: number, x: number) {\n        super(html, css);\n        this.x = x;\n        this.y = y;\n    }\n}\n"
    }
}
